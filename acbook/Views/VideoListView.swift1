//
//  VideoListView.swift
//  acbook
//
//  Created by tony on 21/2/2025.
//
// 这是一个单列列表布局的备份文件

import SwiftUI

struct VideoListView: View {
    @StateObject private var viewModel = VideoViewModel()
    @State private var scrollViewOffset: CGFloat = 0
    @State private var searchText: String = ""  // 搜索文本

    var body: some View {
        ZStack {
            
            if viewModel.isLoading {
                ProgressView("Loading videos...")
                    .progressViewStyle(CircularProgressViewStyle())
            } else {
                
                VStack {
                    HStack {
                        TextField("Search videos...", text: $searchText)
                            .padding()
                            .background(Color.white.opacity(0.2))
                            .cornerRadius(10)
                            .foregroundColor(.white)
                            .padding(.horizontal)
                            .onChange(of: searchText) {
                                // 每次搜索文本变化时触发搜索
                                if searchText.isEmpty {
                                    // 如果搜索框为空，重新加载所有视频
                                    viewModel.fetchVideos()
                                } else {
                                    // 如果有搜索内容，调用搜索接口
                                    viewModel.searchVideos(query: searchText)
                                }
                            }
                    }
                    
                    
                    
                    ScrollView(.vertical, showsIndicators: false) {
                        LazyVStack(spacing: 20) {
                            ForEach(viewModel.videos) { video in
                                VideoItemView(video: video)
                            }
                        }
                        .onAppear {
                            // viewModel.fetchVideos()
                        }
                        .onChange(of: scrollViewOffset) {
                            if scrollViewOffset > 300 {
                                // viewModel.fetchVideos()
                            }
                        }
                        .background(
                            GeometryReader { geo in
                                Color.clear.onChange(of: geo.frame(in: .global).minY) {
                                    scrollViewOffset = geo.frame(in: .global).minY
                                }
                            }
                        )
                    }
                    .padding()
                    .edgesIgnoringSafeArea(.all)
                }
            }
        }
        .onAppear {
            if viewModel.videos.isEmpty{
                viewModel.fetchVideos()
            }
            
        }
    }
}


